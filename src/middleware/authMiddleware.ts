import { Request, Response, NextFunction } from "express";
import fetch from "node-fetch";

// Extend Express Request type to include user property
declare global {
  namespace Express {
    interface Request {
      user?: any;
    }
  }
}

/**
 * Middleware to verify Cloud Run access tokens
 * This validates tokens generated by the gcloud-authentication service
 */
export async function verifyCloudRunToken(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  try {
    // Get token from Authorization header
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      res.status(401).json({
        error: "Authentication required",
        message: "Missing or invalid authorization header",
      });
      return;
    }

    // Extract token
    const token = authHeader.substring(7);
    
    // Validate token with Google's tokeninfo endpoint
    const tokenInfo = await validateAccessToken(token);
    
    // Add validated token information to request
    req.user = tokenInfo;
    next();
  } catch (error) {
    console.error("Token validation error:", error);
    res.status(403).json({
      error: "Authentication failed",
      message: "Invalid or expired token",
    });
  }
}

/**
 * Validates a Google Cloud access token
 */
async function validateAccessToken(token: string): Promise<any> {
  const response = await fetch(
    `https://oauth2.googleapis.com/tokeninfo?access_token=${token}`
  );

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Invalid token: ${errorText}`);
  }

  const tokenInfo = await response.json();
  
  // Basic validation
  if (!tokenInfo.expires_in || tokenInfo.expires_in <= 0) {
    throw new Error("Token is expired");
  }

  return tokenInfo;
}